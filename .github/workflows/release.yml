name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.24"

      - name: Get version from tag
        id: version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build binaries
        run: |
          # Build for multiple platforms
          GOOS=linux GOARCH=amd64 go build -o bpl-tools-linux-amd64 .
          GOOS=windows GOARCH=amd64 go build -o bpl-tools-windows-amd64.exe .
          GOOS=darwin GOARCH=amd64 go build -o bpl-tools-darwin-amd64 .
          GOOS=darwin GOARCH=arm64 go build -o bpl-tools-darwin-arm64 .

      - name: Create release packages
        run: |
          # Create .env file with dummy values
          cat > release.env << 'EOF'
          # BPL API Configuration
          BPL_TOKEN=your_bpl_token_here

          # Path of Exile Session ID
          POESESSID=your_poe_session_id_here

          # Guild ID for Path of Exile (required for guild stash monitoring)
          GUILD_ID=your_guild_id_here

          # Private League ID (required for guild invites)
          PRIVATE_LEAGUE_ID=your_private_league_id_here
          EOF

          # Create directories for each platform
          mkdir -p releases/linux-amd64
          mkdir -p releases/windows-amd64
          mkdir -p releases/darwin-amd64
          mkdir -p releases/darwin-arm64

          # Copy binaries and files to each platform directory
          cp bpl-tools-linux-amd64 releases/linux-amd64/bpl-tools
          cp release.env releases/linux-amd64/.env
          cp README.md releases/linux-amd64/
          cp setup.sh releases/linux-amd64/

          cp bpl-tools-windows-amd64.exe releases/windows-amd64/bpl-tools.exe
          cp release.env releases/windows-amd64/.env
          cp README.md releases/windows-amd64/
          cp setup.sh releases/windows-amd64/

          cp bpl-tools-darwin-amd64 releases/darwin-amd64/bpl-tools
          cp release.env releases/darwin-amd64/.env
          cp README.md releases/darwin-amd64/
          cp setup.sh releases/darwin-amd64/

          cp bpl-tools-darwin-arm64 releases/darwin-arm64/bpl-tools
          cp release.env releases/darwin-arm64/.env
          cp README.md releases/darwin-arm64/
          cp setup.sh releases/darwin-arm64/

          # Create zip archives
          cd releases
          zip -r ../bpl-tools-${{ steps.version.outputs.VERSION }}-linux-amd64.zip linux-amd64/
          zip -r ../bpl-tools-${{ steps.version.outputs.VERSION }}-windows-amd64.zip windows-amd64/
          zip -r ../bpl-tools-${{ steps.version.outputs.VERSION }}-darwin-amd64.zip darwin-amd64/
          zip -r ../bpl-tools-${{ steps.version.outputs.VERSION }}-darwin-arm64.zip darwin-arm64/
          cd ..

      - name: Generate release notes
        id: release_notes
        run: |
          cat > release_notes.md << 'EOF'
          ## BPL Tools ${{ steps.version.outputs.VERSION }}

          ### Downloads
          - **Linux (x64)**: `bpl-tools-${{ steps.version.outputs.VERSION }}-linux-amd64.zip`
          - **Windows (x64)**: `bpl-tools-${{ steps.version.outputs.VERSION }}-windows-amd64.zip`
          - **macOS (Intel)**: `bpl-tools-${{ steps.version.outputs.VERSION }}-darwin-amd64.zip`
          - **macOS (Apple Silicon)**: `bpl-tools-${{ steps.version.outputs.VERSION }}-darwin-arm64.zip`

          ### Setup Instructions
          1. Download the appropriate zip file for your platform
          2. Extract the zip file
          3. Run the setup script (optional but recommended):
             - **Linux/macOS**: `chmod +x setup.sh && ./setup.sh`
             - **Windows**: Run `setup.sh` in Git Bash or WSL
          4. Configure the `.env` file with your actual values:
             - `BPL_TOKEN`: Your BPL API token
             - `POESESSID`: Your Path of Exile session ID
             - `GUILD_ID`: Your guild ID (for guild stash monitoring)
             - `PRIVATE_LEAGUE_ID`: Your private league ID
          5. Run the tool: `./bpl-tools` (Linux/macOS) or `bpl-tools.exe` (Windows)

          ### Features
          - **Check Player Names**: Verify player names contain team abbreviations
          - **Handle Guild Invites**: Automatically process guild invitations
          - **Guild Stash Monitor**: Monitor and sync guild stash changes
          - **Interactive Menu**: Easy-to-use arrow key navigation
          - **Single Run or Continuous**: Choose how to execute each tool

          ### Requirements
          - Valid Path of Exile session ID
          - BPL API access token
          - Guild ID (for stash monitoring features)
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.VERSION }}
          name: BPL Tools ${{ steps.version.outputs.VERSION }}
          body_path: release_notes.md
          files: |
            bpl-tools-${{ steps.version.outputs.VERSION }}-linux-amd64.zip
            bpl-tools-${{ steps.version.outputs.VERSION }}-windows-amd64.zip
            bpl-tools-${{ steps.version.outputs.VERSION }}-darwin-amd64.zip
            bpl-tools-${{ steps.version.outputs.VERSION }}-darwin-arm64.zip
          draft: false
          prerelease: false
